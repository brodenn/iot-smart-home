
TempHumMonitor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  00000da8  00000e1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000da8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ecc  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a22  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007dc  00000000  00000000  00002942  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d8  00000000  00000000  00003120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fc  00000000  00000000  000032f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004fc  00000000  00000000  000037f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003cf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3b       	cpi	r26, 0xBA	; 186
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include "include/sensor.h"
#include "include/uart.h"
#include <util/delay.h>
#include <stdio.h>

int main() {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	c4 56       	subi	r28, 0x64	; 100
  a0:	d1 09       	sbc	r29, r1
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
    char buffer[100]; // Buffer for UART messages

    UART_Init();   // Initialize UART for serial communication
  ac:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Init>
    I2C_Init();    // Initialize I2C for Si7021 sensor
  b0:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Init>
    ADC_Init();    // Initialize ADC for light sensor
  b4:	0e 94 cc 00 	call	0x198	; 0x198 <ADC_Init>

    UART_SendString("Starting sensor monitoring...\r\n");
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	0e 94 08 02 	call	0x410	; 0x410 <UART_SendString>

    while (1) {
        // Read temperature and humidity
        int16_t temperature = Si7021_ReadTemperature();
  c0:	0e 94 37 01 	call	0x26e	; 0x26e <Si7021_ReadTemperature>
  c4:	8c 01       	movw	r16, r24
        int16_t humidity = Si7021_ReadHumidity();
  c6:	0e 94 96 01 	call	0x32c	; 0x32c <Si7021_ReadHumidity>
  ca:	7c 01       	movw	r14, r24

        // Read light intensity
        uint16_t lux = LightSensor_ReadLux();
  cc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LightSensor_ReadLux>

        // Format and send sensor data
        sprintf(buffer, "Temp: %d.%02d degC, Hum: %d.%02d%%RH, Light: %u lux\r\n",
  d0:	9f 93       	push	r25
  d2:	8f 93       	push	r24
  d4:	24 e6       	ldi	r18, 0x64	; 100
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	c7 01       	movw	r24, r14
  da:	b9 01       	movw	r22, r18
  dc:	0e 94 b1 03 	call	0x762	; 0x762 <__divmodhi4>
  e0:	9f 93       	push	r25
  e2:	8f 93       	push	r24
  e4:	7f 93       	push	r23
  e6:	6f 93       	push	r22
  e8:	c8 01       	movw	r24, r16
  ea:	b9 01       	movw	r22, r18
  ec:	0e 94 b1 03 	call	0x762	; 0x762 <__divmodhi4>
  f0:	9f 93       	push	r25
  f2:	8f 93       	push	r24
  f4:	7f 93       	push	r23
  f6:	6f 93       	push	r22
  f8:	80 e2       	ldi	r24, 0x20	; 32
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	9f 93       	push	r25
  fe:	8f 93       	push	r24
 100:	8e 01       	movw	r16, r28
 102:	0f 5f       	subi	r16, 0xFF	; 255
 104:	1f 4f       	sbci	r17, 0xFF	; 255
 106:	1f 93       	push	r17
 108:	0f 93       	push	r16
 10a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <sprintf>
        temperature / 100, temperature % 100,
        humidity / 100, humidity % 100,
        lux);
        UART_SendString(buffer); // Send the formatted string
 10e:	c8 01       	movw	r24, r16
 110:	0e 94 08 02 	call	0x410	; 0x410 <UART_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	87 ea       	ldi	r24, 0xA7	; 167
 118:	91 e6       	ldi	r25, 0x61	; 97
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x84>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x8e>
 124:	00 00       	nop
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
 130:	c7 cf       	rjmp	.-114    	; 0xc0 <main+0x2a>

00000132 <I2C_Init>:
#include <avr/io.h>
#include "../include/i2c.h"

void I2C_Init() {
    TWSR = 0x00;        // Set prescaler to 1
 132:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    TWBR = 72;          // Set SCL frequency to 100 kHz
 136:	88 e4       	ldi	r24, 0x48	; 72
 138:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    TWCR = (1 << TWEN); // Enable TWI (I2C)
 13c:	84 e0       	ldi	r24, 0x04	; 4
 13e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 142:	08 95       	ret

00000144 <I2C_Start>:
}

void I2C_Start() {
    TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); // Send START condition
 144:	84 ea       	ldi	r24, 0xA4	; 164
 146:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1 << TWINT)));                  // Wait for completion
 14a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 14e:	88 23       	and	r24, r24
 150:	e4 f7       	brge	.-8      	; 0x14a <I2C_Start+0x6>
}
 152:	08 95       	ret

00000154 <I2C_Stop>:

void I2C_Stop() {
    TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT); // Send STOP condition
 154:	84 e9       	ldi	r24, 0x94	; 148
 156:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 15a:	08 95       	ret

0000015c <I2C_Write>:
}

void I2C_Write(uint8_t data) {
    TWDR = data;                      // Load data into data register
 15c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1 << TWEN) | (1 << TWINT); // Start transmission
 160:	84 e8       	ldi	r24, 0x84	; 132
 162:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1 << TWINT)));   // Wait for completion
 166:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 16a:	88 23       	and	r24, r24
 16c:	e4 f7       	brge	.-8      	; 0x166 <I2C_Write+0xa>
}
 16e:	08 95       	ret

00000170 <I2C_Read_ACK>:

uint8_t I2C_Read_ACK() {
    TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT); // Enable ACK and start reception
 170:	84 ec       	ldi	r24, 0xC4	; 196
 172:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1 << TWINT)));                 // Wait for completion
 176:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17a:	88 23       	and	r24, r24
 17c:	e4 f7       	brge	.-8      	; 0x176 <I2C_Read_ACK+0x6>
    return TWDR;                                    // Return received data
 17e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 182:	08 95       	ret

00000184 <I2C_Read_NACK>:

uint8_t I2C_Read_NACK() {
    TWCR = (1 << TWEN) | (1 << TWINT); // Start reception without ACK
 184:	84 e8       	ldi	r24, 0x84	; 132
 186:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1 << TWINT)));   // Wait for completion
 18a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 18e:	88 23       	and	r24, r24
 190:	e4 f7       	brge	.-8      	; 0x18a <I2C_Read_NACK+0x6>
    return TWDR;                      // Return received data
 192:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 196:	08 95       	ret

00000198 <ADC_Init>:
// -------- ADC Functions --------

// Initialize the ADC for reading the light sensor
void ADC_Init() {
    // Configure ADC: AVCC as reference, right-adjusted result
    ADMUX = (1 << REFS0); // Reference voltage = AVCC
 198:	80 e4       	ldi	r24, 0x40	; 64
 19a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0); // Enable ADC and set prescaler to 8
 19e:	83 e8       	ldi	r24, 0x83	; 131
 1a0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1a4:	08 95       	ret

000001a6 <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
    // Select ADC channel
    ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
 1a6:	ec e7       	ldi	r30, 0x7C	; 124
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	90 81       	ld	r25, Z
 1ac:	90 7f       	andi	r25, 0xF0	; 240
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	89 2b       	or	r24, r25
 1b2:	80 83       	st	Z, r24
    
    // Start conversion
    ADCSRA |= (1 << ADSC);
 1b4:	ea e7       	ldi	r30, 0x7A	; 122
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 64       	ori	r24, 0x40	; 64
 1bc:	80 83       	st	Z, r24
    
    // Wait for conversion to complete
    while (ADCSRA & (1 << ADSC));
 1be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1c2:	86 fd       	sbrc	r24, 6
 1c4:	fc cf       	rjmp	.-8      	; 0x1be <ADC_Read+0x18>
    
    // Return ADC result
    return ADC;
 1c6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1ca:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 1ce:	08 95       	ret

000001d0 <LightSensor_ReadLux>:

uint16_t LightSensor_ReadLux() {
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	e2 97       	sbiw	r28, 0x32	; 50
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	f8 94       	cli
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	cd bf       	out	0x3d, r28	; 61
    uint16_t adcValue = ADC_Read(1); // Read from channel A1
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <ADC_Read>
 1f2:	8c 01       	movw	r16, r24
    char buffer[50];

    // Debug raw ADC value
    sprintf(buffer, "Raw ADC Value: %u\r\n", adcValue);
 1f4:	1f 93       	push	r17
 1f6:	8f 93       	push	r24
 1f8:	86 e5       	ldi	r24, 0x56	; 86
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	9f 93       	push	r25
 1fe:	8f 93       	push	r24
 200:	ce 01       	movw	r24, r28
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	7c 01       	movw	r14, r24
 206:	9f 93       	push	r25
 208:	8f 93       	push	r24
 20a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <sprintf>
    UART_SendString(buffer);
 20e:	c7 01       	movw	r24, r14
 210:	0e 94 08 02 	call	0x410	; 0x410 <UART_SendString>

    // Convert ADC value to voltage
    float voltage = (adcValue * 3.3) / 1023.0; // Assuming 3.3V reference voltage
 214:	b8 01       	movw	r22, r16
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 b6 02 	call	0x56c	; 0x56c <__floatunsisf>
 21e:	23 e3       	ldi	r18, 0x33	; 51
 220:	33 e3       	ldi	r19, 0x33	; 51
 222:	43 e5       	ldi	r20, 0x53	; 83
 224:	50 e4       	ldi	r21, 0x40	; 64
 226:	0e 94 44 03 	call	0x688	; 0x688 <__mulsf3>
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 ec       	ldi	r19, 0xC0	; 192
 22e:	4f e7       	ldi	r20, 0x7F	; 127
 230:	54 e4       	ldi	r21, 0x44	; 68
 232:	0e 94 15 02 	call	0x42a	; 0x42a <__divsf3>

    // Calculate lux (adjust sensitivity based on ALS-PT19 datasheet)
    uint16_t lux = (uint16_t)(voltage / 0.005); // Example sensitivity: 0.005 V/lux
 236:	2a e0       	ldi	r18, 0x0A	; 10
 238:	37 ed       	ldi	r19, 0xD7	; 215
 23a:	43 ea       	ldi	r20, 0xA3	; 163
 23c:	5b e3       	ldi	r21, 0x3B	; 59
 23e:	0e 94 15 02 	call	0x42a	; 0x42a <__divsf3>
 242:	0e 94 87 02 	call	0x50e	; 0x50e <__fixunssfsi>

    return lux;
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
}
 252:	cb 01       	movw	r24, r22
 254:	e2 96       	adiw	r28, 0x32	; 50
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	de bf       	out	0x3e, r29	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	cd bf       	out	0x3d, r28	; 61
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	08 95       	ret

0000026e <Si7021_ReadTemperature>:



// -------- Si7021 Functions --------

int16_t Si7021_ReadTemperature() {
 26e:	ef 92       	push	r14
 270:	ff 92       	push	r15
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	e2 97       	sbiw	r28, 0x32	; 50
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
    uint8_t msb, lsb;
    uint16_t rawTemp;

    I2C_Start();
 28a:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_Start>
    I2C_Write(SI7021_ADDR << 1);
 28e:	80 e8       	ldi	r24, 0x80	; 128
 290:	0e 94 ae 00 	call	0x15c	; 0x15c <I2C_Write>
    I2C_Write(0xE3); // Temperature measurement command
 294:	83 ee       	ldi	r24, 0xE3	; 227
 296:	0e 94 ae 00 	call	0x15c	; 0x15c <I2C_Write>
    I2C_Stop();
 29a:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Stop>
 29e:	2f ef       	ldi	r18, 0xFF	; 255
 2a0:	30 e7       	ldi	r19, 0x70	; 112
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	21 50       	subi	r18, 0x01	; 1
 2a6:	30 40       	sbci	r19, 0x00	; 0
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <Si7021_ReadTemperature+0x36>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <Si7021_ReadTemperature+0x40>
 2ae:	00 00       	nop

    _delay_ms(50);

    I2C_Start();
 2b0:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_Start>
    I2C_Write((SI7021_ADDR << 1) | 1);
 2b4:	81 e8       	ldi	r24, 0x81	; 129
 2b6:	0e 94 ae 00 	call	0x15c	; 0x15c <I2C_Write>
    msb = I2C_Read_ACK();
 2ba:	0e 94 b8 00 	call	0x170	; 0x170 <I2C_Read_ACK>
 2be:	f8 2e       	mov	r15, r24
    lsb = I2C_Read_NACK();
 2c0:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Read_NACK>
 2c4:	e8 2e       	mov	r14, r24
    I2C_Stop();
 2c6:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Stop>

    rawTemp = (msb << 8) | lsb;
 2ca:	0f 2d       	mov	r16, r15
 2cc:	10 e0       	ldi	r17, 0x00	; 0
 2ce:	10 2f       	mov	r17, r16
 2d0:	00 27       	eor	r16, r16
 2d2:	0e 29       	or	r16, r14

    // Debug raw temperature data
    char buffer[50];
    sprintf(buffer, "Raw Temp Data: MSB=0x%02X, LSB=0x%02X\r\n", msb, lsb);
 2d4:	1f 92       	push	r1
 2d6:	ef 92       	push	r14
 2d8:	1f 92       	push	r1
 2da:	ff 92       	push	r15
 2dc:	8a e6       	ldi	r24, 0x6A	; 106
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	9f 93       	push	r25
 2e2:	8f 93       	push	r24
 2e4:	9e 01       	movw	r18, r28
 2e6:	2f 5f       	subi	r18, 0xFF	; 255
 2e8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ea:	79 01       	movw	r14, r18
 2ec:	3f 93       	push	r19
 2ee:	2f 93       	push	r18
 2f0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <sprintf>
    UART_SendString(buffer);
 2f4:	c7 01       	movw	r24, r14
 2f6:	0e 94 08 02 	call	0x410	; 0x410 <UART_SendString>

    // Calculate temperature in hundredths of a degree
    return ((17572L * rawTemp) / 65536L) - 4685;
 2fa:	98 01       	movw	r18, r16
 2fc:	a4 ea       	ldi	r26, 0xA4	; 164
 2fe:	b4 e4       	ldi	r27, 0x44	; 68
 300:	0e 94 c5 03 	call	0x78a	; 0x78a <__umulhisi3>
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
}
 30e:	8d 54       	subi	r24, 0x4D	; 77
 310:	92 41       	sbci	r25, 0x12	; 18
 312:	e2 96       	adiw	r28, 0x32	; 50
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	f8 94       	cli
 318:	de bf       	out	0x3e, r29	; 62
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	cd bf       	out	0x3d, r28	; 61
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	08 95       	ret

0000032c <Si7021_ReadHumidity>:


int16_t Si7021_ReadHumidity() {
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
 33c:	e2 97       	sbiw	r28, 0x32	; 50
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	de bf       	out	0x3e, r29	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	cd bf       	out	0x3d, r28	; 61
    uint8_t msb, lsb;
    uint16_t rawHum;

    I2C_Start();
 348:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_Start>
    I2C_Write(SI7021_ADDR << 1);
 34c:	80 e8       	ldi	r24, 0x80	; 128
 34e:	0e 94 ae 00 	call	0x15c	; 0x15c <I2C_Write>
    I2C_Write(0xE5); // Humidity measurement command
 352:	85 ee       	ldi	r24, 0xE5	; 229
 354:	0e 94 ae 00 	call	0x15c	; 0x15c <I2C_Write>
    I2C_Stop();
 358:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Stop>
 35c:	2f ef       	ldi	r18, 0xFF	; 255
 35e:	30 e7       	ldi	r19, 0x70	; 112
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	21 50       	subi	r18, 0x01	; 1
 364:	30 40       	sbci	r19, 0x00	; 0
 366:	80 40       	sbci	r24, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <Si7021_ReadHumidity+0x36>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <Si7021_ReadHumidity+0x40>
 36c:	00 00       	nop

    _delay_ms(50);

    I2C_Start();
 36e:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_Start>
    I2C_Write((SI7021_ADDR << 1) | 1);
 372:	81 e8       	ldi	r24, 0x81	; 129
 374:	0e 94 ae 00 	call	0x15c	; 0x15c <I2C_Write>
    msb = I2C_Read_ACK();
 378:	0e 94 b8 00 	call	0x170	; 0x170 <I2C_Read_ACK>
 37c:	f8 2e       	mov	r15, r24
    lsb = I2C_Read_NACK();
 37e:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Read_NACK>
 382:	e8 2e       	mov	r14, r24
    I2C_Stop();
 384:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Stop>

    rawHum = (msb << 8) | lsb;
 388:	0f 2d       	mov	r16, r15
 38a:	10 e0       	ldi	r17, 0x00	; 0
 38c:	10 2f       	mov	r17, r16
 38e:	00 27       	eor	r16, r16
 390:	0e 29       	or	r16, r14

    // Debug raw humidity data
    char buffer[50];
    sprintf(buffer, "Raw Hum Data: MSB=0x%02X, LSB=0x%02X\r\n", msb, lsb);
 392:	1f 92       	push	r1
 394:	ef 92       	push	r14
 396:	1f 92       	push	r1
 398:	ff 92       	push	r15
 39a:	82 e9       	ldi	r24, 0x92	; 146
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	9f 93       	push	r25
 3a0:	8f 93       	push	r24
 3a2:	9e 01       	movw	r18, r28
 3a4:	2f 5f       	subi	r18, 0xFF	; 255
 3a6:	3f 4f       	sbci	r19, 0xFF	; 255
 3a8:	79 01       	movw	r14, r18
 3aa:	3f 93       	push	r19
 3ac:	2f 93       	push	r18
 3ae:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <sprintf>
    UART_SendString(buffer);
 3b2:	c7 01       	movw	r24, r14
 3b4:	0e 94 08 02 	call	0x410	; 0x410 <UART_SendString>

    // Calculate humidity in hundredths of a percent
    return ((12500L * rawHum) / 65536L) - 600;
 3b8:	98 01       	movw	r18, r16
 3ba:	a4 ed       	ldi	r26, 0xD4	; 212
 3bc:	b0 e3       	ldi	r27, 0x30	; 48
 3be:	0e 94 c5 03 	call	0x78a	; 0x78a <__umulhisi3>
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
}
 3cc:	88 55       	subi	r24, 0x58	; 88
 3ce:	92 40       	sbci	r25, 0x02	; 2
 3d0:	e2 96       	adiw	r28, 0x32	; 50
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	08 95       	ret

000003ea <UART_Init>:
#include <avr/io.h>
#include "../include/uart.h"

void UART_Init() {
    // Set baud rate (9600 with 16MHz clock)
    UBRR0H = 0;               // High byte of baud rate
 3ea:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = 103;             // Low byte of baud rate
 3ee:	87 e6       	ldi	r24, 0x67	; 103
 3f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0B = (1 << TXEN0);    // Enable transmitter
 3f4:	88 e0       	ldi	r24, 0x08	; 8
 3f6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8-bit data, 1 stop bit, no parity
 3fa:	86 e0       	ldi	r24, 0x06	; 6
 3fc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 400:	08 95       	ret

00000402 <UART_SendChar>:
}

void UART_SendChar(char c) {
    while (!(UCSR0A & (1 << UDRE0))); // Wait until data register is empty
 402:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 406:	95 ff       	sbrs	r25, 5
 408:	fc cf       	rjmp	.-8      	; 0x402 <UART_SendChar>
    UDR0 = c;                         // Load the character into the data register
 40a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 40e:	08 95       	ret

00000410 <UART_SendString>:
}

void UART_SendString(const char* str) {
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	ec 01       	movw	r28, r24
    while (*str) {
 416:	03 c0       	rjmp	.+6      	; 0x41e <UART_SendString+0xe>
        UART_SendChar(*str++); // Send each character in the string
 418:	21 96       	adiw	r28, 0x01	; 1
 41a:	0e 94 01 02 	call	0x402	; 0x402 <UART_SendChar>
    while (!(UCSR0A & (1 << UDRE0))); // Wait until data register is empty
    UDR0 = c;                         // Load the character into the data register
}

void UART_SendString(const char* str) {
    while (*str) {
 41e:	88 81       	ld	r24, Y
 420:	81 11       	cpse	r24, r1
 422:	fa cf       	rjmp	.-12     	; 0x418 <UART_SendString+0x8>
        UART_SendChar(*str++); // Send each character in the string
    }
}
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <__divsf3>:
 42a:	0e 94 29 02 	call	0x452	; 0x452 <__divsf3x>
 42e:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_round>
 432:	0e 94 03 03 	call	0x606	; 0x606 <__fp_pscB>
 436:	58 f0       	brcs	.+22     	; 0x44e <__divsf3+0x24>
 438:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__fp_pscA>
 43c:	40 f0       	brcs	.+16     	; 0x44e <__divsf3+0x24>
 43e:	29 f4       	brne	.+10     	; 0x44a <__divsf3+0x20>
 440:	5f 3f       	cpi	r21, 0xFF	; 255
 442:	29 f0       	breq	.+10     	; 0x44e <__divsf3+0x24>
 444:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__fp_inf>
 448:	51 11       	cpse	r21, r1
 44a:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_szero>
 44e:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__fp_nan>

00000452 <__divsf3x>:
 452:	0e 94 1b 03 	call	0x636	; 0x636 <__fp_split3>
 456:	68 f3       	brcs	.-38     	; 0x432 <__divsf3+0x8>

00000458 <__divsf3_pse>:
 458:	99 23       	and	r25, r25
 45a:	b1 f3       	breq	.-20     	; 0x448 <__divsf3+0x1e>
 45c:	55 23       	and	r21, r21
 45e:	91 f3       	breq	.-28     	; 0x444 <__divsf3+0x1a>
 460:	95 1b       	sub	r25, r21
 462:	55 0b       	sbc	r21, r21
 464:	bb 27       	eor	r27, r27
 466:	aa 27       	eor	r26, r26
 468:	62 17       	cp	r22, r18
 46a:	73 07       	cpc	r23, r19
 46c:	84 07       	cpc	r24, r20
 46e:	38 f0       	brcs	.+14     	; 0x47e <__divsf3_pse+0x26>
 470:	9f 5f       	subi	r25, 0xFF	; 255
 472:	5f 4f       	sbci	r21, 0xFF	; 255
 474:	22 0f       	add	r18, r18
 476:	33 1f       	adc	r19, r19
 478:	44 1f       	adc	r20, r20
 47a:	aa 1f       	adc	r26, r26
 47c:	a9 f3       	breq	.-22     	; 0x468 <__divsf3_pse+0x10>
 47e:	35 d0       	rcall	.+106    	; 0x4ea <__divsf3_pse+0x92>
 480:	0e 2e       	mov	r0, r30
 482:	3a f0       	brmi	.+14     	; 0x492 <__divsf3_pse+0x3a>
 484:	e0 e8       	ldi	r30, 0x80	; 128
 486:	32 d0       	rcall	.+100    	; 0x4ec <__divsf3_pse+0x94>
 488:	91 50       	subi	r25, 0x01	; 1
 48a:	50 40       	sbci	r21, 0x00	; 0
 48c:	e6 95       	lsr	r30
 48e:	00 1c       	adc	r0, r0
 490:	ca f7       	brpl	.-14     	; 0x484 <__divsf3_pse+0x2c>
 492:	2b d0       	rcall	.+86     	; 0x4ea <__divsf3_pse+0x92>
 494:	fe 2f       	mov	r31, r30
 496:	29 d0       	rcall	.+82     	; 0x4ea <__divsf3_pse+0x92>
 498:	66 0f       	add	r22, r22
 49a:	77 1f       	adc	r23, r23
 49c:	88 1f       	adc	r24, r24
 49e:	bb 1f       	adc	r27, r27
 4a0:	26 17       	cp	r18, r22
 4a2:	37 07       	cpc	r19, r23
 4a4:	48 07       	cpc	r20, r24
 4a6:	ab 07       	cpc	r26, r27
 4a8:	b0 e8       	ldi	r27, 0x80	; 128
 4aa:	09 f0       	breq	.+2      	; 0x4ae <__divsf3_pse+0x56>
 4ac:	bb 0b       	sbc	r27, r27
 4ae:	80 2d       	mov	r24, r0
 4b0:	bf 01       	movw	r22, r30
 4b2:	ff 27       	eor	r31, r31
 4b4:	93 58       	subi	r25, 0x83	; 131
 4b6:	5f 4f       	sbci	r21, 0xFF	; 255
 4b8:	3a f0       	brmi	.+14     	; 0x4c8 <__divsf3_pse+0x70>
 4ba:	9e 3f       	cpi	r25, 0xFE	; 254
 4bc:	51 05       	cpc	r21, r1
 4be:	78 f0       	brcs	.+30     	; 0x4de <__divsf3_pse+0x86>
 4c0:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__fp_inf>
 4c4:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_szero>
 4c8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ca:	e4 f3       	brlt	.-8      	; 0x4c4 <__divsf3_pse+0x6c>
 4cc:	98 3e       	cpi	r25, 0xE8	; 232
 4ce:	d4 f3       	brlt	.-12     	; 0x4c4 <__divsf3_pse+0x6c>
 4d0:	86 95       	lsr	r24
 4d2:	77 95       	ror	r23
 4d4:	67 95       	ror	r22
 4d6:	b7 95       	ror	r27
 4d8:	f7 95       	ror	r31
 4da:	9f 5f       	subi	r25, 0xFF	; 255
 4dc:	c9 f7       	brne	.-14     	; 0x4d0 <__divsf3_pse+0x78>
 4de:	88 0f       	add	r24, r24
 4e0:	91 1d       	adc	r25, r1
 4e2:	96 95       	lsr	r25
 4e4:	87 95       	ror	r24
 4e6:	97 f9       	bld	r25, 7
 4e8:	08 95       	ret
 4ea:	e1 e0       	ldi	r30, 0x01	; 1
 4ec:	66 0f       	add	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	88 1f       	adc	r24, r24
 4f2:	bb 1f       	adc	r27, r27
 4f4:	62 17       	cp	r22, r18
 4f6:	73 07       	cpc	r23, r19
 4f8:	84 07       	cpc	r24, r20
 4fa:	ba 07       	cpc	r27, r26
 4fc:	20 f0       	brcs	.+8      	; 0x506 <__divsf3_pse+0xae>
 4fe:	62 1b       	sub	r22, r18
 500:	73 0b       	sbc	r23, r19
 502:	84 0b       	sbc	r24, r20
 504:	ba 0b       	sbc	r27, r26
 506:	ee 1f       	adc	r30, r30
 508:	88 f7       	brcc	.-30     	; 0x4ec <__divsf3_pse+0x94>
 50a:	e0 95       	com	r30
 50c:	08 95       	ret

0000050e <__fixunssfsi>:
 50e:	0e 94 23 03 	call	0x646	; 0x646 <__fp_splitA>
 512:	88 f0       	brcs	.+34     	; 0x536 <__fixunssfsi+0x28>
 514:	9f 57       	subi	r25, 0x7F	; 127
 516:	98 f0       	brcs	.+38     	; 0x53e <__fixunssfsi+0x30>
 518:	b9 2f       	mov	r27, r25
 51a:	99 27       	eor	r25, r25
 51c:	b7 51       	subi	r27, 0x17	; 23
 51e:	b0 f0       	brcs	.+44     	; 0x54c <__fixunssfsi+0x3e>
 520:	e1 f0       	breq	.+56     	; 0x55a <__fixunssfsi+0x4c>
 522:	66 0f       	add	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	88 1f       	adc	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	1a f0       	brmi	.+6      	; 0x532 <__fixunssfsi+0x24>
 52c:	ba 95       	dec	r27
 52e:	c9 f7       	brne	.-14     	; 0x522 <__fixunssfsi+0x14>
 530:	14 c0       	rjmp	.+40     	; 0x55a <__fixunssfsi+0x4c>
 532:	b1 30       	cpi	r27, 0x01	; 1
 534:	91 f0       	breq	.+36     	; 0x55a <__fixunssfsi+0x4c>
 536:	0e 94 3d 03 	call	0x67a	; 0x67a <__fp_zero>
 53a:	b1 e0       	ldi	r27, 0x01	; 1
 53c:	08 95       	ret
 53e:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__fp_zero>
 542:	67 2f       	mov	r22, r23
 544:	78 2f       	mov	r23, r24
 546:	88 27       	eor	r24, r24
 548:	b8 5f       	subi	r27, 0xF8	; 248
 54a:	39 f0       	breq	.+14     	; 0x55a <__fixunssfsi+0x4c>
 54c:	b9 3f       	cpi	r27, 0xF9	; 249
 54e:	cc f3       	brlt	.-14     	; 0x542 <__fixunssfsi+0x34>
 550:	86 95       	lsr	r24
 552:	77 95       	ror	r23
 554:	67 95       	ror	r22
 556:	b3 95       	inc	r27
 558:	d9 f7       	brne	.-10     	; 0x550 <__fixunssfsi+0x42>
 55a:	3e f4       	brtc	.+14     	; 0x56a <__fixunssfsi+0x5c>
 55c:	90 95       	com	r25
 55e:	80 95       	com	r24
 560:	70 95       	com	r23
 562:	61 95       	neg	r22
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	8f 4f       	sbci	r24, 0xFF	; 255
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	08 95       	ret

0000056c <__floatunsisf>:
 56c:	e8 94       	clt
 56e:	09 c0       	rjmp	.+18     	; 0x582 <__floatsisf+0x12>

00000570 <__floatsisf>:
 570:	97 fb       	bst	r25, 7
 572:	3e f4       	brtc	.+14     	; 0x582 <__floatsisf+0x12>
 574:	90 95       	com	r25
 576:	80 95       	com	r24
 578:	70 95       	com	r23
 57a:	61 95       	neg	r22
 57c:	7f 4f       	sbci	r23, 0xFF	; 255
 57e:	8f 4f       	sbci	r24, 0xFF	; 255
 580:	9f 4f       	sbci	r25, 0xFF	; 255
 582:	99 23       	and	r25, r25
 584:	a9 f0       	breq	.+42     	; 0x5b0 <__floatsisf+0x40>
 586:	f9 2f       	mov	r31, r25
 588:	96 e9       	ldi	r25, 0x96	; 150
 58a:	bb 27       	eor	r27, r27
 58c:	93 95       	inc	r25
 58e:	f6 95       	lsr	r31
 590:	87 95       	ror	r24
 592:	77 95       	ror	r23
 594:	67 95       	ror	r22
 596:	b7 95       	ror	r27
 598:	f1 11       	cpse	r31, r1
 59a:	f8 cf       	rjmp	.-16     	; 0x58c <__floatsisf+0x1c>
 59c:	fa f4       	brpl	.+62     	; 0x5dc <__floatsisf+0x6c>
 59e:	bb 0f       	add	r27, r27
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <__floatsisf+0x36>
 5a2:	60 ff       	sbrs	r22, 0
 5a4:	1b c0       	rjmp	.+54     	; 0x5dc <__floatsisf+0x6c>
 5a6:	6f 5f       	subi	r22, 0xFF	; 255
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	8f 4f       	sbci	r24, 0xFF	; 255
 5ac:	9f 4f       	sbci	r25, 0xFF	; 255
 5ae:	16 c0       	rjmp	.+44     	; 0x5dc <__floatsisf+0x6c>
 5b0:	88 23       	and	r24, r24
 5b2:	11 f0       	breq	.+4      	; 0x5b8 <__floatsisf+0x48>
 5b4:	96 e9       	ldi	r25, 0x96	; 150
 5b6:	11 c0       	rjmp	.+34     	; 0x5da <__floatsisf+0x6a>
 5b8:	77 23       	and	r23, r23
 5ba:	21 f0       	breq	.+8      	; 0x5c4 <__floatsisf+0x54>
 5bc:	9e e8       	ldi	r25, 0x8E	; 142
 5be:	87 2f       	mov	r24, r23
 5c0:	76 2f       	mov	r23, r22
 5c2:	05 c0       	rjmp	.+10     	; 0x5ce <__floatsisf+0x5e>
 5c4:	66 23       	and	r22, r22
 5c6:	71 f0       	breq	.+28     	; 0x5e4 <__floatsisf+0x74>
 5c8:	96 e8       	ldi	r25, 0x86	; 134
 5ca:	86 2f       	mov	r24, r22
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	2a f0       	brmi	.+10     	; 0x5dc <__floatsisf+0x6c>
 5d2:	9a 95       	dec	r25
 5d4:	66 0f       	add	r22, r22
 5d6:	77 1f       	adc	r23, r23
 5d8:	88 1f       	adc	r24, r24
 5da:	da f7       	brpl	.-10     	; 0x5d2 <__floatsisf+0x62>
 5dc:	88 0f       	add	r24, r24
 5de:	96 95       	lsr	r25
 5e0:	87 95       	ror	r24
 5e2:	97 f9       	bld	r25, 7
 5e4:	08 95       	ret

000005e6 <__fp_inf>:
 5e6:	97 f9       	bld	r25, 7
 5e8:	9f 67       	ori	r25, 0x7F	; 127
 5ea:	80 e8       	ldi	r24, 0x80	; 128
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	08 95       	ret

000005f2 <__fp_nan>:
 5f2:	9f ef       	ldi	r25, 0xFF	; 255
 5f4:	80 ec       	ldi	r24, 0xC0	; 192
 5f6:	08 95       	ret

000005f8 <__fp_pscA>:
 5f8:	00 24       	eor	r0, r0
 5fa:	0a 94       	dec	r0
 5fc:	16 16       	cp	r1, r22
 5fe:	17 06       	cpc	r1, r23
 600:	18 06       	cpc	r1, r24
 602:	09 06       	cpc	r0, r25
 604:	08 95       	ret

00000606 <__fp_pscB>:
 606:	00 24       	eor	r0, r0
 608:	0a 94       	dec	r0
 60a:	12 16       	cp	r1, r18
 60c:	13 06       	cpc	r1, r19
 60e:	14 06       	cpc	r1, r20
 610:	05 06       	cpc	r0, r21
 612:	08 95       	ret

00000614 <__fp_round>:
 614:	09 2e       	mov	r0, r25
 616:	03 94       	inc	r0
 618:	00 0c       	add	r0, r0
 61a:	11 f4       	brne	.+4      	; 0x620 <__fp_round+0xc>
 61c:	88 23       	and	r24, r24
 61e:	52 f0       	brmi	.+20     	; 0x634 <__fp_round+0x20>
 620:	bb 0f       	add	r27, r27
 622:	40 f4       	brcc	.+16     	; 0x634 <__fp_round+0x20>
 624:	bf 2b       	or	r27, r31
 626:	11 f4       	brne	.+4      	; 0x62c <__fp_round+0x18>
 628:	60 ff       	sbrs	r22, 0
 62a:	04 c0       	rjmp	.+8      	; 0x634 <__fp_round+0x20>
 62c:	6f 5f       	subi	r22, 0xFF	; 255
 62e:	7f 4f       	sbci	r23, 0xFF	; 255
 630:	8f 4f       	sbci	r24, 0xFF	; 255
 632:	9f 4f       	sbci	r25, 0xFF	; 255
 634:	08 95       	ret

00000636 <__fp_split3>:
 636:	57 fd       	sbrc	r21, 7
 638:	90 58       	subi	r25, 0x80	; 128
 63a:	44 0f       	add	r20, r20
 63c:	55 1f       	adc	r21, r21
 63e:	59 f0       	breq	.+22     	; 0x656 <__fp_splitA+0x10>
 640:	5f 3f       	cpi	r21, 0xFF	; 255
 642:	71 f0       	breq	.+28     	; 0x660 <__fp_splitA+0x1a>
 644:	47 95       	ror	r20

00000646 <__fp_splitA>:
 646:	88 0f       	add	r24, r24
 648:	97 fb       	bst	r25, 7
 64a:	99 1f       	adc	r25, r25
 64c:	61 f0       	breq	.+24     	; 0x666 <__fp_splitA+0x20>
 64e:	9f 3f       	cpi	r25, 0xFF	; 255
 650:	79 f0       	breq	.+30     	; 0x670 <__fp_splitA+0x2a>
 652:	87 95       	ror	r24
 654:	08 95       	ret
 656:	12 16       	cp	r1, r18
 658:	13 06       	cpc	r1, r19
 65a:	14 06       	cpc	r1, r20
 65c:	55 1f       	adc	r21, r21
 65e:	f2 cf       	rjmp	.-28     	; 0x644 <__fp_split3+0xe>
 660:	46 95       	lsr	r20
 662:	f1 df       	rcall	.-30     	; 0x646 <__fp_splitA>
 664:	08 c0       	rjmp	.+16     	; 0x676 <__fp_splitA+0x30>
 666:	16 16       	cp	r1, r22
 668:	17 06       	cpc	r1, r23
 66a:	18 06       	cpc	r1, r24
 66c:	99 1f       	adc	r25, r25
 66e:	f1 cf       	rjmp	.-30     	; 0x652 <__fp_splitA+0xc>
 670:	86 95       	lsr	r24
 672:	71 05       	cpc	r23, r1
 674:	61 05       	cpc	r22, r1
 676:	08 94       	sec
 678:	08 95       	ret

0000067a <__fp_zero>:
 67a:	e8 94       	clt

0000067c <__fp_szero>:
 67c:	bb 27       	eor	r27, r27
 67e:	66 27       	eor	r22, r22
 680:	77 27       	eor	r23, r23
 682:	cb 01       	movw	r24, r22
 684:	97 f9       	bld	r25, 7
 686:	08 95       	ret

00000688 <__mulsf3>:
 688:	0e 94 57 03 	call	0x6ae	; 0x6ae <__mulsf3x>
 68c:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_round>
 690:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__fp_pscA>
 694:	38 f0       	brcs	.+14     	; 0x6a4 <__mulsf3+0x1c>
 696:	0e 94 03 03 	call	0x606	; 0x606 <__fp_pscB>
 69a:	20 f0       	brcs	.+8      	; 0x6a4 <__mulsf3+0x1c>
 69c:	95 23       	and	r25, r21
 69e:	11 f0       	breq	.+4      	; 0x6a4 <__mulsf3+0x1c>
 6a0:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__fp_inf>
 6a4:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__fp_nan>
 6a8:	11 24       	eor	r1, r1
 6aa:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_szero>

000006ae <__mulsf3x>:
 6ae:	0e 94 1b 03 	call	0x636	; 0x636 <__fp_split3>
 6b2:	70 f3       	brcs	.-36     	; 0x690 <__mulsf3+0x8>

000006b4 <__mulsf3_pse>:
 6b4:	95 9f       	mul	r25, r21
 6b6:	c1 f3       	breq	.-16     	; 0x6a8 <__mulsf3+0x20>
 6b8:	95 0f       	add	r25, r21
 6ba:	50 e0       	ldi	r21, 0x00	; 0
 6bc:	55 1f       	adc	r21, r21
 6be:	62 9f       	mul	r22, r18
 6c0:	f0 01       	movw	r30, r0
 6c2:	72 9f       	mul	r23, r18
 6c4:	bb 27       	eor	r27, r27
 6c6:	f0 0d       	add	r31, r0
 6c8:	b1 1d       	adc	r27, r1
 6ca:	63 9f       	mul	r22, r19
 6cc:	aa 27       	eor	r26, r26
 6ce:	f0 0d       	add	r31, r0
 6d0:	b1 1d       	adc	r27, r1
 6d2:	aa 1f       	adc	r26, r26
 6d4:	64 9f       	mul	r22, r20
 6d6:	66 27       	eor	r22, r22
 6d8:	b0 0d       	add	r27, r0
 6da:	a1 1d       	adc	r26, r1
 6dc:	66 1f       	adc	r22, r22
 6de:	82 9f       	mul	r24, r18
 6e0:	22 27       	eor	r18, r18
 6e2:	b0 0d       	add	r27, r0
 6e4:	a1 1d       	adc	r26, r1
 6e6:	62 1f       	adc	r22, r18
 6e8:	73 9f       	mul	r23, r19
 6ea:	b0 0d       	add	r27, r0
 6ec:	a1 1d       	adc	r26, r1
 6ee:	62 1f       	adc	r22, r18
 6f0:	83 9f       	mul	r24, r19
 6f2:	a0 0d       	add	r26, r0
 6f4:	61 1d       	adc	r22, r1
 6f6:	22 1f       	adc	r18, r18
 6f8:	74 9f       	mul	r23, r20
 6fa:	33 27       	eor	r19, r19
 6fc:	a0 0d       	add	r26, r0
 6fe:	61 1d       	adc	r22, r1
 700:	23 1f       	adc	r18, r19
 702:	84 9f       	mul	r24, r20
 704:	60 0d       	add	r22, r0
 706:	21 1d       	adc	r18, r1
 708:	82 2f       	mov	r24, r18
 70a:	76 2f       	mov	r23, r22
 70c:	6a 2f       	mov	r22, r26
 70e:	11 24       	eor	r1, r1
 710:	9f 57       	subi	r25, 0x7F	; 127
 712:	50 40       	sbci	r21, 0x00	; 0
 714:	9a f0       	brmi	.+38     	; 0x73c <__mulsf3_pse+0x88>
 716:	f1 f0       	breq	.+60     	; 0x754 <__mulsf3_pse+0xa0>
 718:	88 23       	and	r24, r24
 71a:	4a f0       	brmi	.+18     	; 0x72e <__mulsf3_pse+0x7a>
 71c:	ee 0f       	add	r30, r30
 71e:	ff 1f       	adc	r31, r31
 720:	bb 1f       	adc	r27, r27
 722:	66 1f       	adc	r22, r22
 724:	77 1f       	adc	r23, r23
 726:	88 1f       	adc	r24, r24
 728:	91 50       	subi	r25, 0x01	; 1
 72a:	50 40       	sbci	r21, 0x00	; 0
 72c:	a9 f7       	brne	.-22     	; 0x718 <__mulsf3_pse+0x64>
 72e:	9e 3f       	cpi	r25, 0xFE	; 254
 730:	51 05       	cpc	r21, r1
 732:	80 f0       	brcs	.+32     	; 0x754 <__mulsf3_pse+0xa0>
 734:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__fp_inf>
 738:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_szero>
 73c:	5f 3f       	cpi	r21, 0xFF	; 255
 73e:	e4 f3       	brlt	.-8      	; 0x738 <__mulsf3_pse+0x84>
 740:	98 3e       	cpi	r25, 0xE8	; 232
 742:	d4 f3       	brlt	.-12     	; 0x738 <__mulsf3_pse+0x84>
 744:	86 95       	lsr	r24
 746:	77 95       	ror	r23
 748:	67 95       	ror	r22
 74a:	b7 95       	ror	r27
 74c:	f7 95       	ror	r31
 74e:	e7 95       	ror	r30
 750:	9f 5f       	subi	r25, 0xFF	; 255
 752:	c1 f7       	brne	.-16     	; 0x744 <__mulsf3_pse+0x90>
 754:	fe 2b       	or	r31, r30
 756:	88 0f       	add	r24, r24
 758:	91 1d       	adc	r25, r1
 75a:	96 95       	lsr	r25
 75c:	87 95       	ror	r24
 75e:	97 f9       	bld	r25, 7
 760:	08 95       	ret

00000762 <__divmodhi4>:
 762:	97 fb       	bst	r25, 7
 764:	07 2e       	mov	r0, r23
 766:	16 f4       	brtc	.+4      	; 0x76c <__divmodhi4+0xa>
 768:	00 94       	com	r0
 76a:	07 d0       	rcall	.+14     	; 0x77a <__divmodhi4_neg1>
 76c:	77 fd       	sbrc	r23, 7
 76e:	09 d0       	rcall	.+18     	; 0x782 <__divmodhi4_neg2>
 770:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__udivmodhi4>
 774:	07 fc       	sbrc	r0, 7
 776:	05 d0       	rcall	.+10     	; 0x782 <__divmodhi4_neg2>
 778:	3e f4       	brtc	.+14     	; 0x788 <__divmodhi4_exit>

0000077a <__divmodhi4_neg1>:
 77a:	90 95       	com	r25
 77c:	81 95       	neg	r24
 77e:	9f 4f       	sbci	r25, 0xFF	; 255
 780:	08 95       	ret

00000782 <__divmodhi4_neg2>:
 782:	70 95       	com	r23
 784:	61 95       	neg	r22
 786:	7f 4f       	sbci	r23, 0xFF	; 255

00000788 <__divmodhi4_exit>:
 788:	08 95       	ret

0000078a <__umulhisi3>:
 78a:	a2 9f       	mul	r26, r18
 78c:	b0 01       	movw	r22, r0
 78e:	b3 9f       	mul	r27, r19
 790:	c0 01       	movw	r24, r0
 792:	a3 9f       	mul	r26, r19
 794:	70 0d       	add	r23, r0
 796:	81 1d       	adc	r24, r1
 798:	11 24       	eor	r1, r1
 79a:	91 1d       	adc	r25, r1
 79c:	b2 9f       	mul	r27, r18
 79e:	70 0d       	add	r23, r0
 7a0:	81 1d       	adc	r24, r1
 7a2:	11 24       	eor	r1, r1
 7a4:	91 1d       	adc	r25, r1
 7a6:	08 95       	ret

000007a8 <__udivmodhi4>:
 7a8:	aa 1b       	sub	r26, r26
 7aa:	bb 1b       	sub	r27, r27
 7ac:	51 e1       	ldi	r21, 0x11	; 17
 7ae:	07 c0       	rjmp	.+14     	; 0x7be <__udivmodhi4_ep>

000007b0 <__udivmodhi4_loop>:
 7b0:	aa 1f       	adc	r26, r26
 7b2:	bb 1f       	adc	r27, r27
 7b4:	a6 17       	cp	r26, r22
 7b6:	b7 07       	cpc	r27, r23
 7b8:	10 f0       	brcs	.+4      	; 0x7be <__udivmodhi4_ep>
 7ba:	a6 1b       	sub	r26, r22
 7bc:	b7 0b       	sbc	r27, r23

000007be <__udivmodhi4_ep>:
 7be:	88 1f       	adc	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	5a 95       	dec	r21
 7c4:	a9 f7       	brne	.-22     	; 0x7b0 <__udivmodhi4_loop>
 7c6:	80 95       	com	r24
 7c8:	90 95       	com	r25
 7ca:	bc 01       	movw	r22, r24
 7cc:	cd 01       	movw	r24, r26
 7ce:	08 95       	ret

000007d0 <sprintf>:
 7d0:	ae e0       	ldi	r26, 0x0E	; 14
 7d2:	b0 e0       	ldi	r27, 0x00	; 0
 7d4:	ee ee       	ldi	r30, 0xEE	; 238
 7d6:	f3 e0       	ldi	r31, 0x03	; 3
 7d8:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__prologue_saves__+0x1c>
 7dc:	0d 89       	ldd	r16, Y+21	; 0x15
 7de:	1e 89       	ldd	r17, Y+22	; 0x16
 7e0:	86 e0       	ldi	r24, 0x06	; 6
 7e2:	8c 83       	std	Y+4, r24	; 0x04
 7e4:	1a 83       	std	Y+2, r17	; 0x02
 7e6:	09 83       	std	Y+1, r16	; 0x01
 7e8:	8f ef       	ldi	r24, 0xFF	; 255
 7ea:	9f e7       	ldi	r25, 0x7F	; 127
 7ec:	9e 83       	std	Y+6, r25	; 0x06
 7ee:	8d 83       	std	Y+5, r24	; 0x05
 7f0:	ae 01       	movw	r20, r28
 7f2:	47 5e       	subi	r20, 0xE7	; 231
 7f4:	5f 4f       	sbci	r21, 0xFF	; 255
 7f6:	6f 89       	ldd	r22, Y+23	; 0x17
 7f8:	78 8d       	ldd	r23, Y+24	; 0x18
 7fa:	ce 01       	movw	r24, r28
 7fc:	01 96       	adiw	r24, 0x01	; 1
 7fe:	0e 94 0a 04 	call	0x814	; 0x814 <vfprintf>
 802:	ef 81       	ldd	r30, Y+7	; 0x07
 804:	f8 85       	ldd	r31, Y+8	; 0x08
 806:	e0 0f       	add	r30, r16
 808:	f1 1f       	adc	r31, r17
 80a:	10 82       	st	Z, r1
 80c:	2e 96       	adiw	r28, 0x0e	; 14
 80e:	e4 e0       	ldi	r30, 0x04	; 4
 810:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__epilogue_restores__+0x1c>

00000814 <vfprintf>:
 814:	ab e0       	ldi	r26, 0x0B	; 11
 816:	b0 e0       	ldi	r27, 0x00	; 0
 818:	e0 e1       	ldi	r30, 0x10	; 16
 81a:	f4 e0       	ldi	r31, 0x04	; 4
 81c:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__prologue_saves__>
 820:	6c 01       	movw	r12, r24
 822:	7b 01       	movw	r14, r22
 824:	8a 01       	movw	r16, r20
 826:	fc 01       	movw	r30, r24
 828:	17 82       	std	Z+7, r1	; 0x07
 82a:	16 82       	std	Z+6, r1	; 0x06
 82c:	83 81       	ldd	r24, Z+3	; 0x03
 82e:	81 ff       	sbrs	r24, 1
 830:	cc c1       	rjmp	.+920    	; 0xbca <__stack+0x2cb>
 832:	ce 01       	movw	r24, r28
 834:	01 96       	adiw	r24, 0x01	; 1
 836:	3c 01       	movw	r6, r24
 838:	f6 01       	movw	r30, r12
 83a:	93 81       	ldd	r25, Z+3	; 0x03
 83c:	f7 01       	movw	r30, r14
 83e:	93 fd       	sbrc	r25, 3
 840:	85 91       	lpm	r24, Z+
 842:	93 ff       	sbrs	r25, 3
 844:	81 91       	ld	r24, Z+
 846:	7f 01       	movw	r14, r30
 848:	88 23       	and	r24, r24
 84a:	09 f4       	brne	.+2      	; 0x84e <vfprintf+0x3a>
 84c:	ba c1       	rjmp	.+884    	; 0xbc2 <__stack+0x2c3>
 84e:	85 32       	cpi	r24, 0x25	; 37
 850:	39 f4       	brne	.+14     	; 0x860 <vfprintf+0x4c>
 852:	93 fd       	sbrc	r25, 3
 854:	85 91       	lpm	r24, Z+
 856:	93 ff       	sbrs	r25, 3
 858:	81 91       	ld	r24, Z+
 85a:	7f 01       	movw	r14, r30
 85c:	85 32       	cpi	r24, 0x25	; 37
 85e:	29 f4       	brne	.+10     	; 0x86a <vfprintf+0x56>
 860:	b6 01       	movw	r22, r12
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 868:	e7 cf       	rjmp	.-50     	; 0x838 <vfprintf+0x24>
 86a:	91 2c       	mov	r9, r1
 86c:	21 2c       	mov	r2, r1
 86e:	31 2c       	mov	r3, r1
 870:	ff e1       	ldi	r31, 0x1F	; 31
 872:	f3 15       	cp	r31, r3
 874:	d8 f0       	brcs	.+54     	; 0x8ac <vfprintf+0x98>
 876:	8b 32       	cpi	r24, 0x2B	; 43
 878:	79 f0       	breq	.+30     	; 0x898 <vfprintf+0x84>
 87a:	38 f4       	brcc	.+14     	; 0x88a <vfprintf+0x76>
 87c:	80 32       	cpi	r24, 0x20	; 32
 87e:	79 f0       	breq	.+30     	; 0x89e <vfprintf+0x8a>
 880:	83 32       	cpi	r24, 0x23	; 35
 882:	a1 f4       	brne	.+40     	; 0x8ac <vfprintf+0x98>
 884:	23 2d       	mov	r18, r3
 886:	20 61       	ori	r18, 0x10	; 16
 888:	1d c0       	rjmp	.+58     	; 0x8c4 <vfprintf+0xb0>
 88a:	8d 32       	cpi	r24, 0x2D	; 45
 88c:	61 f0       	breq	.+24     	; 0x8a6 <vfprintf+0x92>
 88e:	80 33       	cpi	r24, 0x30	; 48
 890:	69 f4       	brne	.+26     	; 0x8ac <vfprintf+0x98>
 892:	23 2d       	mov	r18, r3
 894:	21 60       	ori	r18, 0x01	; 1
 896:	16 c0       	rjmp	.+44     	; 0x8c4 <vfprintf+0xb0>
 898:	83 2d       	mov	r24, r3
 89a:	82 60       	ori	r24, 0x02	; 2
 89c:	38 2e       	mov	r3, r24
 89e:	e3 2d       	mov	r30, r3
 8a0:	e4 60       	ori	r30, 0x04	; 4
 8a2:	3e 2e       	mov	r3, r30
 8a4:	2a c0       	rjmp	.+84     	; 0x8fa <vfprintf+0xe6>
 8a6:	f3 2d       	mov	r31, r3
 8a8:	f8 60       	ori	r31, 0x08	; 8
 8aa:	1d c0       	rjmp	.+58     	; 0x8e6 <vfprintf+0xd2>
 8ac:	37 fc       	sbrc	r3, 7
 8ae:	2d c0       	rjmp	.+90     	; 0x90a <__stack+0xb>
 8b0:	20 ed       	ldi	r18, 0xD0	; 208
 8b2:	28 0f       	add	r18, r24
 8b4:	2a 30       	cpi	r18, 0x0A	; 10
 8b6:	40 f0       	brcs	.+16     	; 0x8c8 <vfprintf+0xb4>
 8b8:	8e 32       	cpi	r24, 0x2E	; 46
 8ba:	b9 f4       	brne	.+46     	; 0x8ea <vfprintf+0xd6>
 8bc:	36 fc       	sbrc	r3, 6
 8be:	81 c1       	rjmp	.+770    	; 0xbc2 <__stack+0x2c3>
 8c0:	23 2d       	mov	r18, r3
 8c2:	20 64       	ori	r18, 0x40	; 64
 8c4:	32 2e       	mov	r3, r18
 8c6:	19 c0       	rjmp	.+50     	; 0x8fa <vfprintf+0xe6>
 8c8:	36 fe       	sbrs	r3, 6
 8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <vfprintf+0xc4>
 8cc:	8a e0       	ldi	r24, 0x0A	; 10
 8ce:	98 9e       	mul	r9, r24
 8d0:	20 0d       	add	r18, r0
 8d2:	11 24       	eor	r1, r1
 8d4:	92 2e       	mov	r9, r18
 8d6:	11 c0       	rjmp	.+34     	; 0x8fa <vfprintf+0xe6>
 8d8:	ea e0       	ldi	r30, 0x0A	; 10
 8da:	2e 9e       	mul	r2, r30
 8dc:	20 0d       	add	r18, r0
 8de:	11 24       	eor	r1, r1
 8e0:	22 2e       	mov	r2, r18
 8e2:	f3 2d       	mov	r31, r3
 8e4:	f0 62       	ori	r31, 0x20	; 32
 8e6:	3f 2e       	mov	r3, r31
 8e8:	08 c0       	rjmp	.+16     	; 0x8fa <vfprintf+0xe6>
 8ea:	8c 36       	cpi	r24, 0x6C	; 108
 8ec:	21 f4       	brne	.+8      	; 0x8f6 <vfprintf+0xe2>
 8ee:	83 2d       	mov	r24, r3
 8f0:	80 68       	ori	r24, 0x80	; 128
 8f2:	38 2e       	mov	r3, r24
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <vfprintf+0xe6>
 8f6:	88 36       	cpi	r24, 0x68	; 104
 8f8:	41 f4       	brne	.+16     	; 0x90a <__stack+0xb>
 8fa:	f7 01       	movw	r30, r14
 8fc:	93 fd       	sbrc	r25, 3
 8fe:	85 91       	lpm	r24, Z+
 900:	93 ff       	sbrs	r25, 3
 902:	81 91       	ld	r24, Z+
 904:	7f 01       	movw	r14, r30
 906:	81 11       	cpse	r24, r1
 908:	b3 cf       	rjmp	.-154    	; 0x870 <vfprintf+0x5c>
 90a:	98 2f       	mov	r25, r24
 90c:	9f 7d       	andi	r25, 0xDF	; 223
 90e:	95 54       	subi	r25, 0x45	; 69
 910:	93 30       	cpi	r25, 0x03	; 3
 912:	28 f4       	brcc	.+10     	; 0x91e <__stack+0x1f>
 914:	0c 5f       	subi	r16, 0xFC	; 252
 916:	1f 4f       	sbci	r17, 0xFF	; 255
 918:	9f e3       	ldi	r25, 0x3F	; 63
 91a:	99 83       	std	Y+1, r25	; 0x01
 91c:	0d c0       	rjmp	.+26     	; 0x938 <__stack+0x39>
 91e:	83 36       	cpi	r24, 0x63	; 99
 920:	31 f0       	breq	.+12     	; 0x92e <__stack+0x2f>
 922:	83 37       	cpi	r24, 0x73	; 115
 924:	71 f0       	breq	.+28     	; 0x942 <__stack+0x43>
 926:	83 35       	cpi	r24, 0x53	; 83
 928:	09 f0       	breq	.+2      	; 0x92c <__stack+0x2d>
 92a:	59 c0       	rjmp	.+178    	; 0x9de <__stack+0xdf>
 92c:	21 c0       	rjmp	.+66     	; 0x970 <__stack+0x71>
 92e:	f8 01       	movw	r30, r16
 930:	80 81       	ld	r24, Z
 932:	89 83       	std	Y+1, r24	; 0x01
 934:	0e 5f       	subi	r16, 0xFE	; 254
 936:	1f 4f       	sbci	r17, 0xFF	; 255
 938:	88 24       	eor	r8, r8
 93a:	83 94       	inc	r8
 93c:	91 2c       	mov	r9, r1
 93e:	53 01       	movw	r10, r6
 940:	13 c0       	rjmp	.+38     	; 0x968 <__stack+0x69>
 942:	28 01       	movw	r4, r16
 944:	f2 e0       	ldi	r31, 0x02	; 2
 946:	4f 0e       	add	r4, r31
 948:	51 1c       	adc	r5, r1
 94a:	f8 01       	movw	r30, r16
 94c:	a0 80       	ld	r10, Z
 94e:	b1 80       	ldd	r11, Z+1	; 0x01
 950:	36 fe       	sbrs	r3, 6
 952:	03 c0       	rjmp	.+6      	; 0x95a <__stack+0x5b>
 954:	69 2d       	mov	r22, r9
 956:	70 e0       	ldi	r23, 0x00	; 0
 958:	02 c0       	rjmp	.+4      	; 0x95e <__stack+0x5f>
 95a:	6f ef       	ldi	r22, 0xFF	; 255
 95c:	7f ef       	ldi	r23, 0xFF	; 255
 95e:	c5 01       	movw	r24, r10
 960:	0e 94 f6 05 	call	0xbec	; 0xbec <strnlen>
 964:	4c 01       	movw	r8, r24
 966:	82 01       	movw	r16, r4
 968:	f3 2d       	mov	r31, r3
 96a:	ff 77       	andi	r31, 0x7F	; 127
 96c:	3f 2e       	mov	r3, r31
 96e:	16 c0       	rjmp	.+44     	; 0x99c <__stack+0x9d>
 970:	28 01       	movw	r4, r16
 972:	22 e0       	ldi	r18, 0x02	; 2
 974:	42 0e       	add	r4, r18
 976:	51 1c       	adc	r5, r1
 978:	f8 01       	movw	r30, r16
 97a:	a0 80       	ld	r10, Z
 97c:	b1 80       	ldd	r11, Z+1	; 0x01
 97e:	36 fe       	sbrs	r3, 6
 980:	03 c0       	rjmp	.+6      	; 0x988 <__stack+0x89>
 982:	69 2d       	mov	r22, r9
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	02 c0       	rjmp	.+4      	; 0x98c <__stack+0x8d>
 988:	6f ef       	ldi	r22, 0xFF	; 255
 98a:	7f ef       	ldi	r23, 0xFF	; 255
 98c:	c5 01       	movw	r24, r10
 98e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <strnlen_P>
 992:	4c 01       	movw	r8, r24
 994:	f3 2d       	mov	r31, r3
 996:	f0 68       	ori	r31, 0x80	; 128
 998:	3f 2e       	mov	r3, r31
 99a:	82 01       	movw	r16, r4
 99c:	33 fc       	sbrc	r3, 3
 99e:	1b c0       	rjmp	.+54     	; 0x9d6 <__stack+0xd7>
 9a0:	82 2d       	mov	r24, r2
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	88 16       	cp	r8, r24
 9a6:	99 06       	cpc	r9, r25
 9a8:	b0 f4       	brcc	.+44     	; 0x9d6 <__stack+0xd7>
 9aa:	b6 01       	movw	r22, r12
 9ac:	80 e2       	ldi	r24, 0x20	; 32
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 9b4:	2a 94       	dec	r2
 9b6:	f4 cf       	rjmp	.-24     	; 0x9a0 <__stack+0xa1>
 9b8:	f5 01       	movw	r30, r10
 9ba:	37 fc       	sbrc	r3, 7
 9bc:	85 91       	lpm	r24, Z+
 9be:	37 fe       	sbrs	r3, 7
 9c0:	81 91       	ld	r24, Z+
 9c2:	5f 01       	movw	r10, r30
 9c4:	b6 01       	movw	r22, r12
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 9cc:	21 10       	cpse	r2, r1
 9ce:	2a 94       	dec	r2
 9d0:	21 e0       	ldi	r18, 0x01	; 1
 9d2:	82 1a       	sub	r8, r18
 9d4:	91 08       	sbc	r9, r1
 9d6:	81 14       	cp	r8, r1
 9d8:	91 04       	cpc	r9, r1
 9da:	71 f7       	brne	.-36     	; 0x9b8 <__stack+0xb9>
 9dc:	e8 c0       	rjmp	.+464    	; 0xbae <__stack+0x2af>
 9de:	84 36       	cpi	r24, 0x64	; 100
 9e0:	11 f0       	breq	.+4      	; 0x9e6 <__stack+0xe7>
 9e2:	89 36       	cpi	r24, 0x69	; 105
 9e4:	41 f5       	brne	.+80     	; 0xa36 <__stack+0x137>
 9e6:	f8 01       	movw	r30, r16
 9e8:	37 fe       	sbrs	r3, 7
 9ea:	07 c0       	rjmp	.+14     	; 0x9fa <__stack+0xfb>
 9ec:	60 81       	ld	r22, Z
 9ee:	71 81       	ldd	r23, Z+1	; 0x01
 9f0:	82 81       	ldd	r24, Z+2	; 0x02
 9f2:	93 81       	ldd	r25, Z+3	; 0x03
 9f4:	0c 5f       	subi	r16, 0xFC	; 252
 9f6:	1f 4f       	sbci	r17, 0xFF	; 255
 9f8:	08 c0       	rjmp	.+16     	; 0xa0a <__stack+0x10b>
 9fa:	60 81       	ld	r22, Z
 9fc:	71 81       	ldd	r23, Z+1	; 0x01
 9fe:	07 2e       	mov	r0, r23
 a00:	00 0c       	add	r0, r0
 a02:	88 0b       	sbc	r24, r24
 a04:	99 0b       	sbc	r25, r25
 a06:	0e 5f       	subi	r16, 0xFE	; 254
 a08:	1f 4f       	sbci	r17, 0xFF	; 255
 a0a:	f3 2d       	mov	r31, r3
 a0c:	ff 76       	andi	r31, 0x6F	; 111
 a0e:	3f 2e       	mov	r3, r31
 a10:	97 ff       	sbrs	r25, 7
 a12:	09 c0       	rjmp	.+18     	; 0xa26 <__stack+0x127>
 a14:	90 95       	com	r25
 a16:	80 95       	com	r24
 a18:	70 95       	com	r23
 a1a:	61 95       	neg	r22
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	f0 68       	ori	r31, 0x80	; 128
 a24:	3f 2e       	mov	r3, r31
 a26:	2a e0       	ldi	r18, 0x0A	; 10
 a28:	30 e0       	ldi	r19, 0x00	; 0
 a2a:	a3 01       	movw	r20, r6
 a2c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__ultoa_invert>
 a30:	88 2e       	mov	r8, r24
 a32:	86 18       	sub	r8, r6
 a34:	45 c0       	rjmp	.+138    	; 0xac0 <__stack+0x1c1>
 a36:	85 37       	cpi	r24, 0x75	; 117
 a38:	31 f4       	brne	.+12     	; 0xa46 <__stack+0x147>
 a3a:	23 2d       	mov	r18, r3
 a3c:	2f 7e       	andi	r18, 0xEF	; 239
 a3e:	b2 2e       	mov	r11, r18
 a40:	2a e0       	ldi	r18, 0x0A	; 10
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	25 c0       	rjmp	.+74     	; 0xa90 <__stack+0x191>
 a46:	93 2d       	mov	r25, r3
 a48:	99 7f       	andi	r25, 0xF9	; 249
 a4a:	b9 2e       	mov	r11, r25
 a4c:	8f 36       	cpi	r24, 0x6F	; 111
 a4e:	c1 f0       	breq	.+48     	; 0xa80 <__stack+0x181>
 a50:	18 f4       	brcc	.+6      	; 0xa58 <__stack+0x159>
 a52:	88 35       	cpi	r24, 0x58	; 88
 a54:	79 f0       	breq	.+30     	; 0xa74 <__stack+0x175>
 a56:	b5 c0       	rjmp	.+362    	; 0xbc2 <__stack+0x2c3>
 a58:	80 37       	cpi	r24, 0x70	; 112
 a5a:	19 f0       	breq	.+6      	; 0xa62 <__stack+0x163>
 a5c:	88 37       	cpi	r24, 0x78	; 120
 a5e:	21 f0       	breq	.+8      	; 0xa68 <__stack+0x169>
 a60:	b0 c0       	rjmp	.+352    	; 0xbc2 <__stack+0x2c3>
 a62:	e9 2f       	mov	r30, r25
 a64:	e0 61       	ori	r30, 0x10	; 16
 a66:	be 2e       	mov	r11, r30
 a68:	b4 fe       	sbrs	r11, 4
 a6a:	0d c0       	rjmp	.+26     	; 0xa86 <__stack+0x187>
 a6c:	fb 2d       	mov	r31, r11
 a6e:	f4 60       	ori	r31, 0x04	; 4
 a70:	bf 2e       	mov	r11, r31
 a72:	09 c0       	rjmp	.+18     	; 0xa86 <__stack+0x187>
 a74:	34 fe       	sbrs	r3, 4
 a76:	0a c0       	rjmp	.+20     	; 0xa8c <__stack+0x18d>
 a78:	29 2f       	mov	r18, r25
 a7a:	26 60       	ori	r18, 0x06	; 6
 a7c:	b2 2e       	mov	r11, r18
 a7e:	06 c0       	rjmp	.+12     	; 0xa8c <__stack+0x18d>
 a80:	28 e0       	ldi	r18, 0x08	; 8
 a82:	30 e0       	ldi	r19, 0x00	; 0
 a84:	05 c0       	rjmp	.+10     	; 0xa90 <__stack+0x191>
 a86:	20 e1       	ldi	r18, 0x10	; 16
 a88:	30 e0       	ldi	r19, 0x00	; 0
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <__stack+0x191>
 a8c:	20 e1       	ldi	r18, 0x10	; 16
 a8e:	32 e0       	ldi	r19, 0x02	; 2
 a90:	f8 01       	movw	r30, r16
 a92:	b7 fe       	sbrs	r11, 7
 a94:	07 c0       	rjmp	.+14     	; 0xaa4 <__stack+0x1a5>
 a96:	60 81       	ld	r22, Z
 a98:	71 81       	ldd	r23, Z+1	; 0x01
 a9a:	82 81       	ldd	r24, Z+2	; 0x02
 a9c:	93 81       	ldd	r25, Z+3	; 0x03
 a9e:	0c 5f       	subi	r16, 0xFC	; 252
 aa0:	1f 4f       	sbci	r17, 0xFF	; 255
 aa2:	06 c0       	rjmp	.+12     	; 0xab0 <__stack+0x1b1>
 aa4:	60 81       	ld	r22, Z
 aa6:	71 81       	ldd	r23, Z+1	; 0x01
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	0e 5f       	subi	r16, 0xFE	; 254
 aae:	1f 4f       	sbci	r17, 0xFF	; 255
 ab0:	a3 01       	movw	r20, r6
 ab2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__ultoa_invert>
 ab6:	88 2e       	mov	r8, r24
 ab8:	86 18       	sub	r8, r6
 aba:	fb 2d       	mov	r31, r11
 abc:	ff 77       	andi	r31, 0x7F	; 127
 abe:	3f 2e       	mov	r3, r31
 ac0:	36 fe       	sbrs	r3, 6
 ac2:	0d c0       	rjmp	.+26     	; 0xade <__stack+0x1df>
 ac4:	23 2d       	mov	r18, r3
 ac6:	2e 7f       	andi	r18, 0xFE	; 254
 ac8:	a2 2e       	mov	r10, r18
 aca:	89 14       	cp	r8, r9
 acc:	58 f4       	brcc	.+22     	; 0xae4 <__stack+0x1e5>
 ace:	34 fe       	sbrs	r3, 4
 ad0:	0b c0       	rjmp	.+22     	; 0xae8 <__stack+0x1e9>
 ad2:	32 fc       	sbrc	r3, 2
 ad4:	09 c0       	rjmp	.+18     	; 0xae8 <__stack+0x1e9>
 ad6:	83 2d       	mov	r24, r3
 ad8:	8e 7e       	andi	r24, 0xEE	; 238
 ada:	a8 2e       	mov	r10, r24
 adc:	05 c0       	rjmp	.+10     	; 0xae8 <__stack+0x1e9>
 ade:	b8 2c       	mov	r11, r8
 ae0:	a3 2c       	mov	r10, r3
 ae2:	03 c0       	rjmp	.+6      	; 0xaea <__stack+0x1eb>
 ae4:	b8 2c       	mov	r11, r8
 ae6:	01 c0       	rjmp	.+2      	; 0xaea <__stack+0x1eb>
 ae8:	b9 2c       	mov	r11, r9
 aea:	a4 fe       	sbrs	r10, 4
 aec:	0f c0       	rjmp	.+30     	; 0xb0c <__stack+0x20d>
 aee:	fe 01       	movw	r30, r28
 af0:	e8 0d       	add	r30, r8
 af2:	f1 1d       	adc	r31, r1
 af4:	80 81       	ld	r24, Z
 af6:	80 33       	cpi	r24, 0x30	; 48
 af8:	21 f4       	brne	.+8      	; 0xb02 <__stack+0x203>
 afa:	9a 2d       	mov	r25, r10
 afc:	99 7e       	andi	r25, 0xE9	; 233
 afe:	a9 2e       	mov	r10, r25
 b00:	09 c0       	rjmp	.+18     	; 0xb14 <__stack+0x215>
 b02:	a2 fe       	sbrs	r10, 2
 b04:	06 c0       	rjmp	.+12     	; 0xb12 <__stack+0x213>
 b06:	b3 94       	inc	r11
 b08:	b3 94       	inc	r11
 b0a:	04 c0       	rjmp	.+8      	; 0xb14 <__stack+0x215>
 b0c:	8a 2d       	mov	r24, r10
 b0e:	86 78       	andi	r24, 0x86	; 134
 b10:	09 f0       	breq	.+2      	; 0xb14 <__stack+0x215>
 b12:	b3 94       	inc	r11
 b14:	a3 fc       	sbrc	r10, 3
 b16:	11 c0       	rjmp	.+34     	; 0xb3a <__stack+0x23b>
 b18:	a0 fe       	sbrs	r10, 0
 b1a:	06 c0       	rjmp	.+12     	; 0xb28 <__stack+0x229>
 b1c:	b2 14       	cp	r11, r2
 b1e:	88 f4       	brcc	.+34     	; 0xb42 <__stack+0x243>
 b20:	28 0c       	add	r2, r8
 b22:	92 2c       	mov	r9, r2
 b24:	9b 18       	sub	r9, r11
 b26:	0e c0       	rjmp	.+28     	; 0xb44 <__stack+0x245>
 b28:	b2 14       	cp	r11, r2
 b2a:	60 f4       	brcc	.+24     	; 0xb44 <__stack+0x245>
 b2c:	b6 01       	movw	r22, r12
 b2e:	80 e2       	ldi	r24, 0x20	; 32
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 b36:	b3 94       	inc	r11
 b38:	f7 cf       	rjmp	.-18     	; 0xb28 <__stack+0x229>
 b3a:	b2 14       	cp	r11, r2
 b3c:	18 f4       	brcc	.+6      	; 0xb44 <__stack+0x245>
 b3e:	2b 18       	sub	r2, r11
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <__stack+0x247>
 b42:	98 2c       	mov	r9, r8
 b44:	21 2c       	mov	r2, r1
 b46:	a4 fe       	sbrs	r10, 4
 b48:	10 c0       	rjmp	.+32     	; 0xb6a <__stack+0x26b>
 b4a:	b6 01       	movw	r22, r12
 b4c:	80 e3       	ldi	r24, 0x30	; 48
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 b54:	a2 fe       	sbrs	r10, 2
 b56:	17 c0       	rjmp	.+46     	; 0xb86 <__stack+0x287>
 b58:	a1 fc       	sbrc	r10, 1
 b5a:	03 c0       	rjmp	.+6      	; 0xb62 <__stack+0x263>
 b5c:	88 e7       	ldi	r24, 0x78	; 120
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <__stack+0x267>
 b62:	88 e5       	ldi	r24, 0x58	; 88
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	b6 01       	movw	r22, r12
 b68:	0c c0       	rjmp	.+24     	; 0xb82 <__stack+0x283>
 b6a:	8a 2d       	mov	r24, r10
 b6c:	86 78       	andi	r24, 0x86	; 134
 b6e:	59 f0       	breq	.+22     	; 0xb86 <__stack+0x287>
 b70:	a1 fe       	sbrs	r10, 1
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <__stack+0x279>
 b74:	8b e2       	ldi	r24, 0x2B	; 43
 b76:	01 c0       	rjmp	.+2      	; 0xb7a <__stack+0x27b>
 b78:	80 e2       	ldi	r24, 0x20	; 32
 b7a:	a7 fc       	sbrc	r10, 7
 b7c:	8d e2       	ldi	r24, 0x2D	; 45
 b7e:	b6 01       	movw	r22, r12
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 b86:	89 14       	cp	r8, r9
 b88:	38 f4       	brcc	.+14     	; 0xb98 <__stack+0x299>
 b8a:	b6 01       	movw	r22, r12
 b8c:	80 e3       	ldi	r24, 0x30	; 48
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 b94:	9a 94       	dec	r9
 b96:	f7 cf       	rjmp	.-18     	; 0xb86 <__stack+0x287>
 b98:	8a 94       	dec	r8
 b9a:	f3 01       	movw	r30, r6
 b9c:	e8 0d       	add	r30, r8
 b9e:	f1 1d       	adc	r31, r1
 ba0:	80 81       	ld	r24, Z
 ba2:	b6 01       	movw	r22, r12
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 baa:	81 10       	cpse	r8, r1
 bac:	f5 cf       	rjmp	.-22     	; 0xb98 <__stack+0x299>
 bae:	22 20       	and	r2, r2
 bb0:	09 f4       	brne	.+2      	; 0xbb4 <__stack+0x2b5>
 bb2:	42 ce       	rjmp	.-892    	; 0x838 <vfprintf+0x24>
 bb4:	b6 01       	movw	r22, r12
 bb6:	80 e2       	ldi	r24, 0x20	; 32
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 bbe:	2a 94       	dec	r2
 bc0:	f6 cf       	rjmp	.-20     	; 0xbae <__stack+0x2af>
 bc2:	f6 01       	movw	r30, r12
 bc4:	86 81       	ldd	r24, Z+6	; 0x06
 bc6:	97 81       	ldd	r25, Z+7	; 0x07
 bc8:	02 c0       	rjmp	.+4      	; 0xbce <__stack+0x2cf>
 bca:	8f ef       	ldi	r24, 0xFF	; 255
 bcc:	9f ef       	ldi	r25, 0xFF	; 255
 bce:	2b 96       	adiw	r28, 0x0b	; 11
 bd0:	e2 e1       	ldi	r30, 0x12	; 18
 bd2:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__epilogue_restores__>

00000bd6 <strnlen_P>:
 bd6:	fc 01       	movw	r30, r24
 bd8:	05 90       	lpm	r0, Z+
 bda:	61 50       	subi	r22, 0x01	; 1
 bdc:	70 40       	sbci	r23, 0x00	; 0
 bde:	01 10       	cpse	r0, r1
 be0:	d8 f7       	brcc	.-10     	; 0xbd8 <strnlen_P+0x2>
 be2:	80 95       	com	r24
 be4:	90 95       	com	r25
 be6:	8e 0f       	add	r24, r30
 be8:	9f 1f       	adc	r25, r31
 bea:	08 95       	ret

00000bec <strnlen>:
 bec:	fc 01       	movw	r30, r24
 bee:	61 50       	subi	r22, 0x01	; 1
 bf0:	70 40       	sbci	r23, 0x00	; 0
 bf2:	01 90       	ld	r0, Z+
 bf4:	01 10       	cpse	r0, r1
 bf6:	d8 f7       	brcc	.-10     	; 0xbee <strnlen+0x2>
 bf8:	80 95       	com	r24
 bfa:	90 95       	com	r25
 bfc:	8e 0f       	add	r24, r30
 bfe:	9f 1f       	adc	r25, r31
 c00:	08 95       	ret

00000c02 <fputc>:
 c02:	0f 93       	push	r16
 c04:	1f 93       	push	r17
 c06:	cf 93       	push	r28
 c08:	df 93       	push	r29
 c0a:	fb 01       	movw	r30, r22
 c0c:	23 81       	ldd	r18, Z+3	; 0x03
 c0e:	21 fd       	sbrc	r18, 1
 c10:	03 c0       	rjmp	.+6      	; 0xc18 <fputc+0x16>
 c12:	8f ef       	ldi	r24, 0xFF	; 255
 c14:	9f ef       	ldi	r25, 0xFF	; 255
 c16:	2c c0       	rjmp	.+88     	; 0xc70 <fputc+0x6e>
 c18:	22 ff       	sbrs	r18, 2
 c1a:	16 c0       	rjmp	.+44     	; 0xc48 <fputc+0x46>
 c1c:	46 81       	ldd	r20, Z+6	; 0x06
 c1e:	57 81       	ldd	r21, Z+7	; 0x07
 c20:	24 81       	ldd	r18, Z+4	; 0x04
 c22:	35 81       	ldd	r19, Z+5	; 0x05
 c24:	42 17       	cp	r20, r18
 c26:	53 07       	cpc	r21, r19
 c28:	44 f4       	brge	.+16     	; 0xc3a <fputc+0x38>
 c2a:	a0 81       	ld	r26, Z
 c2c:	b1 81       	ldd	r27, Z+1	; 0x01
 c2e:	9d 01       	movw	r18, r26
 c30:	2f 5f       	subi	r18, 0xFF	; 255
 c32:	3f 4f       	sbci	r19, 0xFF	; 255
 c34:	31 83       	std	Z+1, r19	; 0x01
 c36:	20 83       	st	Z, r18
 c38:	8c 93       	st	X, r24
 c3a:	26 81       	ldd	r18, Z+6	; 0x06
 c3c:	37 81       	ldd	r19, Z+7	; 0x07
 c3e:	2f 5f       	subi	r18, 0xFF	; 255
 c40:	3f 4f       	sbci	r19, 0xFF	; 255
 c42:	37 83       	std	Z+7, r19	; 0x07
 c44:	26 83       	std	Z+6, r18	; 0x06
 c46:	14 c0       	rjmp	.+40     	; 0xc70 <fputc+0x6e>
 c48:	8b 01       	movw	r16, r22
 c4a:	ec 01       	movw	r28, r24
 c4c:	fb 01       	movw	r30, r22
 c4e:	00 84       	ldd	r0, Z+8	; 0x08
 c50:	f1 85       	ldd	r31, Z+9	; 0x09
 c52:	e0 2d       	mov	r30, r0
 c54:	09 95       	icall
 c56:	89 2b       	or	r24, r25
 c58:	e1 f6       	brne	.-72     	; 0xc12 <fputc+0x10>
 c5a:	d8 01       	movw	r26, r16
 c5c:	16 96       	adiw	r26, 0x06	; 6
 c5e:	8d 91       	ld	r24, X+
 c60:	9c 91       	ld	r25, X
 c62:	17 97       	sbiw	r26, 0x07	; 7
 c64:	01 96       	adiw	r24, 0x01	; 1
 c66:	17 96       	adiw	r26, 0x07	; 7
 c68:	9c 93       	st	X, r25
 c6a:	8e 93       	st	-X, r24
 c6c:	16 97       	sbiw	r26, 0x06	; 6
 c6e:	ce 01       	movw	r24, r28
 c70:	df 91       	pop	r29
 c72:	cf 91       	pop	r28
 c74:	1f 91       	pop	r17
 c76:	0f 91       	pop	r16
 c78:	08 95       	ret

00000c7a <__ultoa_invert>:
 c7a:	fa 01       	movw	r30, r20
 c7c:	aa 27       	eor	r26, r26
 c7e:	28 30       	cpi	r18, 0x08	; 8
 c80:	51 f1       	breq	.+84     	; 0xcd6 <__ultoa_invert+0x5c>
 c82:	20 31       	cpi	r18, 0x10	; 16
 c84:	81 f1       	breq	.+96     	; 0xce6 <__ultoa_invert+0x6c>
 c86:	e8 94       	clt
 c88:	6f 93       	push	r22
 c8a:	6e 7f       	andi	r22, 0xFE	; 254
 c8c:	6e 5f       	subi	r22, 0xFE	; 254
 c8e:	7f 4f       	sbci	r23, 0xFF	; 255
 c90:	8f 4f       	sbci	r24, 0xFF	; 255
 c92:	9f 4f       	sbci	r25, 0xFF	; 255
 c94:	af 4f       	sbci	r26, 0xFF	; 255
 c96:	b1 e0       	ldi	r27, 0x01	; 1
 c98:	3e d0       	rcall	.+124    	; 0xd16 <__ultoa_invert+0x9c>
 c9a:	b4 e0       	ldi	r27, 0x04	; 4
 c9c:	3c d0       	rcall	.+120    	; 0xd16 <__ultoa_invert+0x9c>
 c9e:	67 0f       	add	r22, r23
 ca0:	78 1f       	adc	r23, r24
 ca2:	89 1f       	adc	r24, r25
 ca4:	9a 1f       	adc	r25, r26
 ca6:	a1 1d       	adc	r26, r1
 ca8:	68 0f       	add	r22, r24
 caa:	79 1f       	adc	r23, r25
 cac:	8a 1f       	adc	r24, r26
 cae:	91 1d       	adc	r25, r1
 cb0:	a1 1d       	adc	r26, r1
 cb2:	6a 0f       	add	r22, r26
 cb4:	71 1d       	adc	r23, r1
 cb6:	81 1d       	adc	r24, r1
 cb8:	91 1d       	adc	r25, r1
 cba:	a1 1d       	adc	r26, r1
 cbc:	20 d0       	rcall	.+64     	; 0xcfe <__ultoa_invert+0x84>
 cbe:	09 f4       	brne	.+2      	; 0xcc2 <__ultoa_invert+0x48>
 cc0:	68 94       	set
 cc2:	3f 91       	pop	r19
 cc4:	2a e0       	ldi	r18, 0x0A	; 10
 cc6:	26 9f       	mul	r18, r22
 cc8:	11 24       	eor	r1, r1
 cca:	30 19       	sub	r19, r0
 ccc:	30 5d       	subi	r19, 0xD0	; 208
 cce:	31 93       	st	Z+, r19
 cd0:	de f6       	brtc	.-74     	; 0xc88 <__ultoa_invert+0xe>
 cd2:	cf 01       	movw	r24, r30
 cd4:	08 95       	ret
 cd6:	46 2f       	mov	r20, r22
 cd8:	47 70       	andi	r20, 0x07	; 7
 cda:	40 5d       	subi	r20, 0xD0	; 208
 cdc:	41 93       	st	Z+, r20
 cde:	b3 e0       	ldi	r27, 0x03	; 3
 ce0:	0f d0       	rcall	.+30     	; 0xd00 <__ultoa_invert+0x86>
 ce2:	c9 f7       	brne	.-14     	; 0xcd6 <__ultoa_invert+0x5c>
 ce4:	f6 cf       	rjmp	.-20     	; 0xcd2 <__ultoa_invert+0x58>
 ce6:	46 2f       	mov	r20, r22
 ce8:	4f 70       	andi	r20, 0x0F	; 15
 cea:	40 5d       	subi	r20, 0xD0	; 208
 cec:	4a 33       	cpi	r20, 0x3A	; 58
 cee:	18 f0       	brcs	.+6      	; 0xcf6 <__ultoa_invert+0x7c>
 cf0:	49 5d       	subi	r20, 0xD9	; 217
 cf2:	31 fd       	sbrc	r19, 1
 cf4:	40 52       	subi	r20, 0x20	; 32
 cf6:	41 93       	st	Z+, r20
 cf8:	02 d0       	rcall	.+4      	; 0xcfe <__ultoa_invert+0x84>
 cfa:	a9 f7       	brne	.-22     	; 0xce6 <__ultoa_invert+0x6c>
 cfc:	ea cf       	rjmp	.-44     	; 0xcd2 <__ultoa_invert+0x58>
 cfe:	b4 e0       	ldi	r27, 0x04	; 4
 d00:	a6 95       	lsr	r26
 d02:	97 95       	ror	r25
 d04:	87 95       	ror	r24
 d06:	77 95       	ror	r23
 d08:	67 95       	ror	r22
 d0a:	ba 95       	dec	r27
 d0c:	c9 f7       	brne	.-14     	; 0xd00 <__ultoa_invert+0x86>
 d0e:	00 97       	sbiw	r24, 0x00	; 0
 d10:	61 05       	cpc	r22, r1
 d12:	71 05       	cpc	r23, r1
 d14:	08 95       	ret
 d16:	9b 01       	movw	r18, r22
 d18:	ac 01       	movw	r20, r24
 d1a:	0a 2e       	mov	r0, r26
 d1c:	06 94       	lsr	r0
 d1e:	57 95       	ror	r21
 d20:	47 95       	ror	r20
 d22:	37 95       	ror	r19
 d24:	27 95       	ror	r18
 d26:	ba 95       	dec	r27
 d28:	c9 f7       	brne	.-14     	; 0xd1c <__ultoa_invert+0xa2>
 d2a:	62 0f       	add	r22, r18
 d2c:	73 1f       	adc	r23, r19
 d2e:	84 1f       	adc	r24, r20
 d30:	95 1f       	adc	r25, r21
 d32:	a0 1d       	adc	r26, r0
 d34:	08 95       	ret

00000d36 <__prologue_saves__>:
 d36:	2f 92       	push	r2
 d38:	3f 92       	push	r3
 d3a:	4f 92       	push	r4
 d3c:	5f 92       	push	r5
 d3e:	6f 92       	push	r6
 d40:	7f 92       	push	r7
 d42:	8f 92       	push	r8
 d44:	9f 92       	push	r9
 d46:	af 92       	push	r10
 d48:	bf 92       	push	r11
 d4a:	cf 92       	push	r12
 d4c:	df 92       	push	r13
 d4e:	ef 92       	push	r14
 d50:	ff 92       	push	r15
 d52:	0f 93       	push	r16
 d54:	1f 93       	push	r17
 d56:	cf 93       	push	r28
 d58:	df 93       	push	r29
 d5a:	cd b7       	in	r28, 0x3d	; 61
 d5c:	de b7       	in	r29, 0x3e	; 62
 d5e:	ca 1b       	sub	r28, r26
 d60:	db 0b       	sbc	r29, r27
 d62:	0f b6       	in	r0, 0x3f	; 63
 d64:	f8 94       	cli
 d66:	de bf       	out	0x3e, r29	; 62
 d68:	0f be       	out	0x3f, r0	; 63
 d6a:	cd bf       	out	0x3d, r28	; 61
 d6c:	09 94       	ijmp

00000d6e <__epilogue_restores__>:
 d6e:	2a 88       	ldd	r2, Y+18	; 0x12
 d70:	39 88       	ldd	r3, Y+17	; 0x11
 d72:	48 88       	ldd	r4, Y+16	; 0x10
 d74:	5f 84       	ldd	r5, Y+15	; 0x0f
 d76:	6e 84       	ldd	r6, Y+14	; 0x0e
 d78:	7d 84       	ldd	r7, Y+13	; 0x0d
 d7a:	8c 84       	ldd	r8, Y+12	; 0x0c
 d7c:	9b 84       	ldd	r9, Y+11	; 0x0b
 d7e:	aa 84       	ldd	r10, Y+10	; 0x0a
 d80:	b9 84       	ldd	r11, Y+9	; 0x09
 d82:	c8 84       	ldd	r12, Y+8	; 0x08
 d84:	df 80       	ldd	r13, Y+7	; 0x07
 d86:	ee 80       	ldd	r14, Y+6	; 0x06
 d88:	fd 80       	ldd	r15, Y+5	; 0x05
 d8a:	0c 81       	ldd	r16, Y+4	; 0x04
 d8c:	1b 81       	ldd	r17, Y+3	; 0x03
 d8e:	aa 81       	ldd	r26, Y+2	; 0x02
 d90:	b9 81       	ldd	r27, Y+1	; 0x01
 d92:	ce 0f       	add	r28, r30
 d94:	d1 1d       	adc	r29, r1
 d96:	0f b6       	in	r0, 0x3f	; 63
 d98:	f8 94       	cli
 d9a:	de bf       	out	0x3e, r29	; 62
 d9c:	0f be       	out	0x3f, r0	; 63
 d9e:	cd bf       	out	0x3d, r28	; 61
 da0:	ed 01       	movw	r28, r26
 da2:	08 95       	ret

00000da4 <_exit>:
 da4:	f8 94       	cli

00000da6 <__stop_program>:
 da6:	ff cf       	rjmp	.-2      	; 0xda6 <__stop_program>
